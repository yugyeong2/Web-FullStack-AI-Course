
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>채팅 서버에 연결된 모든 사용자 간 채팅</title>
</head>
<body>
    <h1>채팅 서버에 연결된 모든 사용자 간 채팅</h1>
    닉네임: <input type="text" id="nickname"/> <br/>
    메시지: <input type="text" id="message"/> <br/>
    <button id="btnSend">전송</button>

    <!-- 채팅 수신 이력 표시 영역 -->
    <ul id="chatHistory">
        <li>유경: 안녕하세요!</li>
    </ul>


    <!-- 클라이언트 코딩을 위한 jquery cdn 라이브러리 참조-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <!-- socket.io javascript library 참조-->
    <script src="/socket.io/socket.io.js"></script>


    <!-- 프론트엔드 코딩 영역입니다. 웹브라우저에서 실행됩니다. -->
    <script>
        // 클라이언트(웹브라우저)와 서버 연결 소켓 객체 정의
        // 서버 소켓과 연결을 시도하고, 연결이 완료되면 연결이 지속된다.
        // io.connect('/')를 통해 서버소켓과 연결을 완료하고, 서버로 메시지를 보낼 socket객체가 반환된다.
        var socket = io.connect('/');

        // Jquery에서 html 요소의 id값으로 html요소를 찾는다. -> $("#html요소의 id값")
        $("#btnSend").click(function() {
            // 사용자 닉네임과 메시지 입력값을 추출한다.
            var nickname = $("#nickname").val(); // input 박스에서 값을 가져온다.
            var message = $("#message").val();

            var msgData = `${nickname}:${message}`;

            // socket.emit('서버 이벤트 수신기명', '서버로 보낼 전송 데이터');
            socket.emit('broadcast', msgData); // 클라이언트에서 서버의 broadcast로 메시지를 보낸다.

        })

        // 서버에서 보내준 메시지를 수신하는 수신기 정의하기
        // 클라이언트 이벤트 메시지 수신기 정의
        socket.on('receiveAll', function(serverMsg) {
            // 서버에서 보내준 메시지 문자열을 포함한 li 태그를 하나 만들고, ul태그에 li태그를 추가한다. -> .append()
            $("#chatHistory").append(`<li>${serverMsg}</li>`); // chatHistory태그안에 요소를 추가한다.
        });

    </script>
</body>
</html>
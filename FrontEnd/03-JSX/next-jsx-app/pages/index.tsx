import Head from 'next/head';
// Image 컴포넌트 참조하기
// NextJS Image 컴포넌트를 이용하면, 자동으로 가로/세로 비율을 유지하며, 이미지를 최적화하여 화면에 출력한다.
import Image from 'next/image';
import { Inter } from 'next/font/google';
// 홈컴포넌트 전용 css모듈 파일 참조하기
import styles from '@/styles/Home.module.css';

// React 패키지 참조와 Fragment 컴포넌트 참조하기
import React, { Fragment } from 'react';

const inter = Inter({ subsets: ['latin'] });

// 인사말 정의 함수형 컴포넌트
// JSX 코드를 반환하기 때문에 이 또한 함수형 컴포넌트이다.
function Hello(isLogin: boolean): JSX.Element {
  // 반환값이 JSX.Element
  if (isLogin) {
    return <b>로그인되었습니다.</b>;
  } else {
    return <b>로그인이 필요합니다.</b>;
  }
}

export default function Home() {
  // 프로그래밍 로직을 구현하는 영역
  const userName = '박유경';
  const isLogin: boolean = false;

  // 인삿말을 출력하는 화살표 함수 컴포넌트
  const Greeting = () => {
    if (isLogin) {
      return <b>{userName}님, 로그인되었습니다.</b>;
    } else {
      return <b>로그인이 필요합니다.</b>;
    }
  };

  // 현재 컴포넌트에서 재사용 가능한 스타일을 정의한다.
  // JSX에서 style을 정의할 때는 객체로 생성하며, -대신 카멜식으로 쓴다.
  const myStyle = {
    color: 'white',
    backgroundColor: 'gray', // CSS에서는 background-color
    padding: '10px',
    margin: '10px',
    borderRadius: '5px', // CSS에서는 border-radius
    fontSize: '1.2em', // 기존의 폰트 크기에서 비율을 1.2배로 설정한다. -> 요즘은 px단위로 잘 바꾸지 않는다.
    fontWeight: 'bold'
  };

  // 주제 배열 데이터 생성하기
  const topics = [
    {
      id: 1,
      title: 'React',
      content: '리액트는 페이스북에서 개발한 UI 라이브러리입니다.',
    },
    {
      id: 2,
      title: 'Angular',
      content: '앵귤러는 구글에서 개발한 웹 UI 프레임워크입니다.'
    },
    {
      id: 3,
      title: 'Next.js',
      content: 'Next.js는 버셀사에서 개발한 웹 풀스택 개발 프레임워크입니다.'
    }
  ];


  return (
    <Fragment>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>
            {/* 안녕하세요. {userName}님! */}
            {/* {isLogin ? '로그인되었습니다.' : '로그인이 필요합니다.'} */}
            {/* {isLogin ? (<b>{userName}님으로 로그인되었습니다.</b>) : (<b>로그인해주세요.</b>)} */}
            {/* {Hello(isLogin)} */}
            {Greeting()}
          </p>

          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{' '}
              {/* NextJS의 이미지 컴포넌트를 사용 */}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>

            {/* 직접적으로 img 태그 사용 -> NextJS의 Image 컴포넌트를 사용하는 것이 좋다. */}
            {/* <img src="/vercel.svg" alt="Vercel Logo" className={styles.vercelLogo}/> */}
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js Logo"
            width={180}
            height={37}
            priority
          />
        </div>

        {/* JSX요소내에 인라인 스타일 정의하기 */}
        {/* JSX에서는 CSS 표준의 -는 사용하지 않는다. 대신 카멜식으로 표현한다.
        -> background-color가 아니라 backgroundColor로 쓴다. */}
        <div style={{ color: 'white', backgroundColor: 'gray' }}>
          JSX 스타일링 방법을 배워봅시다.
          <br /> {/* br 태그도 닫는 태그 반드시 필요 */}
          즐거운 React Next.js 코딩되세요!
        </div>

        <br />

        {/* 직접적으로 스타일 - 인라인 스타일 */}
        <div style={myStyle}>재사용 가능한 JSX 스타일링 방법을 배워봅시다.1</div>
        {/* 클래스로 정의된 공통 스타일 */}
        <div className={styles.sample1}>재사용 가능한 JSX 스타일링 방법을 배워봅시다.2</div>
        {/* 전역 클래스로 정의된 스타일 */}
        <div className="sample2">JSX의 재사용 가능한 스타일링 방법을 배워봅시다.3</div>

        <div className={styles.grid}>
          {/* 동적으로 배열 아이템 수만큼 JSX 요소를 생성한다. */}
          {/* 화살표 함수의 return 구문 생략 */}
          {topics.map((topic, index)=>( // 배열의 수(index)만큼 topic이 생긴다. -> 단, 여기서는 topic.id로 설정했다.
              <a
                href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                className={styles.card}
                target="_blank"
                rel="noopener noreferrer"
                key={topic.id} // map을 사용하면 반복하는 대상의 key라는 속성을 지정해야 한다.
              >
                <h2>
                  {topic.title}
                </h2>
                <p>
                  {topic.content}
                </p>
              </a>              
          ))}

          <a
            href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Learn <span>-&gt;</span>
            </h2>
            <p>
              Learn about Next.js in an interactive course with&nbsp;quizzes!
            </p>
          </a>

          <a
            href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Templates <span>-&gt;</span>
            </h2>
            <p>
              Discover and deploy boilerplate example Next.js&nbsp;projects.
            </p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Deploy <span>-&gt;</span>
            </h2>
            <p>
              Instantly deploy your Next.js site to a shareable URL
              with&nbsp;Vercel.
            </p>
          </a>
        </div>
      </main>
    </Fragment>
  );
}
